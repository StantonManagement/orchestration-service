version: '3.8'

services:
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - SERVICE_NAME=orchestrator
      - SERVICE_VERSION=1.0.0
      - PORT=8000
      - HOST=0.0.0.0
      - DEBUG=false
      - LOG_LEVEL=INFO

      # External Service URLs (for development)
      - SMS_AGENT_URL=http://sms-agent:8002
      - COLLECTIONS_MONITOR_URL=http://collections-monitor:8001
      - NOTIFICATION_SERVICE_URL=http://notification-service:8003

      # OpenAI Configuration (set in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=gpt-4-turbo-preview
      - OPENAI_TEMPERATURE=0.7
      - OPENAI_MAX_TOKENS=200

      # Supabase Configuration (set in .env file)
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_DB_URL=${SUPABASE_DB_URL}

      # Business Rules Configuration
      - MAX_PAYMENT_WEEKS=12
      - MIN_WEEKLY_PAYMENT=25
      - AUTO_APPROVAL_CONFIDENCE=0.85
      - MANUAL_APPROVAL_MIN_CONFIDENCE=0.60
      - ESCALATION_HOURS=36

      # Circuit Breaker Configuration
      - CIRCUIT_BREAKER_FAILURE_THRESHOLD=5
      - CIRCUIT_BREAKER_TIMEOUT_SECONDS=60
      - RETRY_MAX_ATTEMPTS=3
      - RETRY_BASE_DELAY_SECONDS=1

      # Security Configuration
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30

      # Monitoring and Metrics
      - METRICS_ENABLED=true
      - METRICS_PORT=9090
      - HEALTH_CHECK_INTERVAL_SECONDS=30

      # Manager Notifications
      - MANAGER_EMAIL=manager@company.com
      - APPROVAL_NOTIFICATION_ENABLED=true
      - ESCALATION_NOTIFICATION_ENABLED=true

      # Development Settings
      - DEVELOPMENT_MODE=false
      - MOCK_EXTERNAL_SERVICES=false
      - ENABLE_CORS=true
      - CORS_ORIGINS=["http://localhost:3000","http://localhost:8080"]

    volumes:
      - ./logs:/app/logs
      - ./.env:/app/.env:ro

    depends_on:
      - postgres

    networks:
      - orchestrator-network

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database (for local development, use Supabase in production)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=orchestrator
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - orchestrator-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - orchestrator-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - orchestrator-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:

networks:
  orchestrator-network:
    driver: bridge